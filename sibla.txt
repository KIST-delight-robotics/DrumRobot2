        switch (state.test.load())
        {
            case TestSub::SelectParamByUser:
                {
                    int ret = system("clear");
                    if (ret == -1)
                        std::cout << "system clear error" << endl;
                    
                    ////////////////////////////////////////////////////////////////////////////////////////////////
                    float c_MotorAngle[10];
                    getMotorPos(c_MotorAngle);
        
                    std::cout << "[ Current Q Values (Radian / Degree) ]\n";
                    for (int i = 0; i < 10; i++)
                    {
                        q[i] = c_MotorAngle[i];
                        std::cout << "Q[" << i << "] : " << c_MotorAngle[i] << "\t\t" << c_MotorAngle[i] * 180.0 / M_PI << "\n";
                    }
                    FK(c_MotorAngle); // 현재 q값에 대한 FK 진행
                    ////////////////////////////////////////////////////////////////////////////////////////////////
        
                    std::cout << "\nSelect Method (1 - 관절각도값 조절, 2 - 좌표값 조절, 3 - 손목 모터, -1 - 나가기) : ";
                    std::cin >> method;
                    
                    if (method == 1)
                    {
                        state.test = TestSub::SetQValue;
                    }
                    else if (method == 2)
                    {
                        state.test = TestSub::SetXYZ;
                    }
                    else if (method == 3)
                    {
                        state.test = TestSub::TestMaxon;
                    }
                    else if (method == -1)
                    {
                        return;
                    }
        
                    break;
                }
            case TestSub::SetQValue:
                {
        
                    int userInput = 100;
                    int ret = system("clear");
                    if (ret == -1)
                        std::cout << "system clear error" << endl;
        
                    float c_MotorAngle[10] = {0};
                    getMotorPos(c_MotorAngle);
        
                    std::cout << "\n[Current Q Values] [Target Q Values] (Radian)\n";
                    for (int i = 0; i < 10; i++)
                    {
                        std::cout << "Q[" << i << "] : " << c_MotorAngle[i] << "\t<->\t" << q[i] << std::endl;
                    }
        
                    std::cout << "\ntime : " << t << "s";
                    std::cout << "\nnumber of repeat : " << n_repeat << std::endl << std::endl;
        
                    
                    std::cout << "\nSelect Motor to Change Value (0-8) / Run (9) / Time (10) / Extra Time (11) / Repeat(12) / break on off (13) / Exit (-1): ";
                    std::cin >> userInput;
        
                    if (userInput == -1)
                    {
                        state.test = TestSub::SelectParamByUser;
                    }
                    else if (userInput < 9)
                    {
                        float degree_angle;
                        
                        std::cout << "\nRange : " << jointRangeMin[userInput] << "~" << jointRangeMax[userInput] << "(Degree)\n";
                        std::cout << "Enter q[" << userInput << "] Values (Degree) : ";
                        std::cin >> degree_angle;
                        q[userInput] = degree_angle * M_PI / 180.0;
                    }
                    else if (userInput == 9)
                    {
                        for (auto &motor_pair : motors)
                        {
                            if (std::shared_ptr<TMotor> tMotor = std::dynamic_pointer_cast<TMotor>(motor_pair.second))
                            {
                                tMotor->clearCommandBuffer();
                                tMotor->clearReceiveBuffer();
                            }
                            else if (std::shared_ptr<MaxonMotor> maxonMotor = std::dynamic_pointer_cast<MaxonMotor>(motor_pair.second))
                            {
                                maxonMotor->clearCommandBuffer();
                                maxonMotor->clearReceiveBuffer();
                            }
                        }
                        state.test = TestSub::FillBuf;
                        usleep(5000);
                        unfixedMotor();
                    }
                    else if (userInput == 10)
                    {
                        std::cout << "time : ";
                        std::cin >> t;
                    }
                    else if (userInput == 11)
                    {
                        std::cout << "extra time : ";
                        std::cin >> extra_time;
                    }
                    else if (userInput == 12)
                    {
                        std::cout << "number of repeat : ";
                        std::cin >> n_repeat;
                    }
                /*else if (userInput == 13)
                    {
                        bool usbio_output = false;
        
                        std::cout << "Current brake states:" << std::endl;
                        for (int i = 0; i < 7; i++)
                        {
                            std::cout << "Brake " << i << ": " << (single_brake_flag[i] ? "Active" : "Inactive") << std::endl;
                        }
        
                        int break_num;
                        cin >> break_num;
        
                        if(!single_brake_flag[break_num])
                        {
                            usbio.setUSBIO4761(break_num % 7, true);
                            usbio_output = usbio.outputUSBIO4761();
                            single_brake_flag[break_num] = true;
                        }
                        else
                        {
                            usbio.setUSBIO4761(break_num % 7, false);
                            usbio_output = usbio.outputUSBIO4761();
                            single_brake_flag[break_num] = false;
                        }
        
                        if(!usbio_output)
                        {
                            std::cout << "OUTPUT Error" << endl;
                            usleep(5000000);
                            break;
                        }
        
                    }
                    */
        
                    break;
                }
            case TestSub::TestMaxon:
                {
                    //std::shared_ptr<MaxonMotor> maxonMotor = std::dynamic_pointer_cast<MaxonMotor>(motors["maxonForTest"]);
                    int userInput = 100;
                    int ret = system("clear");
                    if (ret == -1)
                        std::cout << "system clear error" << endl;
                    
                    float c_MotorAngle[10] = {0};
                    getMotorPos(c_MotorAngle);
        
                    curMode = "CSP";
        
                    for (int i = 0; i < 10; i++)
                    {
                        q[i] = c_MotorAngle[i];
                        std::cout << "Q[" << i << "] : " << c_MotorAngle[i] << "\t\t" << c_MotorAngle[i] * 180.0 / M_PI << "\n";
                    }
        
                    if(hitTest)
                    {
                        static int i = 0;
                        static int repeatCnt = 0;
                        int n = hit_time / dt;
                        
                        //canManager.isHit = true;
        
                        for (auto &entry : motors)
                        {
                            if (std::shared_ptr<MaxonMotor> maxonMotor = std::dynamic_pointer_cast<MaxonMotor>(entry.second))
                            {
                                MaxonData newData;
                                if (hitMode == 1)
                                {
                                    if (repeatCnt == repeat)
                                    {
                                        q[8] = makeWristAngle(0, hit_time, i * dt, 1, intensity, maxonMotor->hitting, maxonMotor->hittingPos);
                                    }
                                    else if (repeatCnt == 0)
                                    {
                                        q[8] = makeWristAngle(0, hit_time, i * dt, 2, intensity, maxonMotor->hitting, maxonMotor->hittingPos);
                                    }
                                    else
                                    {
                                        q[8] = makeWristAngle(0, hit_time, i * dt, 3, intensity, maxonMotor->hitting, maxonMotor->hittingPos);
                                    }
                                }
                                else if (hitMode == 2)
                                {
                                    maxonMotor->hitting = false;
                                    if (repeatCnt == repeat)
                                    {
                                        q[8] = makeWristAngle(0, hit_time, i * dt, 1, intensity, maxonMotor->hitting, maxonMotor->hittingPos);
                                    }
                                    else if (repeatCnt == 0)
                                    {
                                        q[8] = makeWristAngle(0, hit_time, i * dt, 2, intensity, maxonMotor->hitting, maxonMotor->hittingPos);
                                    }
                                    else
                                    {
                                        q[8] = makeWristAngle(0, hit_time, i * dt, 3, intensity, maxonMotor->hitting, maxonMotor->hittingPos);
                                    }
                                }
                                else
                                {
                                    if (repeatCnt == repeat)
                                    {
                                        q[8] = makeWristAngle_CST(0, hit_time, i * dt, 1, intensity, maxonMotor->hitting, maxonMotor->hittingPos);
                                    }
                                    else if (repeatCnt == 0)
                                    {
                                        q[8] = makeWristAngle_CST(0, hit_time, i * dt, 2, intensity, maxonMotor->hitting, maxonMotor->hittingPos);
                                    }
                                    else
                                    {
                                        q[8] = makeWristAngle_CST(0, hit_time, i * dt, 3, intensity, maxonMotor->hitting, maxonMotor->hittingPos);
                                    }
                                }
        
                                newData.position = q[motorMapping[entry.first]];
                                maxonMotor->commandBuffer.push(newData);
                                //fun._DATA("wristAngleData", (float)maxonMotor->nodeId , newData.position, 0);
                            }
                        }
                        if (i >= n)
                        {
                            i = 0;
                            if (repeatCnt >= repeat)
                            {
                                repeatCnt = 0;
                                hitTest = false;
                                break;
                            }
                            else
                            {
                                repeatCnt++;
                            }
                        }
                        else
                        {
                            i++;
                        }
                        state.test = TestSub::CheckBuf;
                        unfixedMotor();
                    }
                    else
                    {
                        // canManager.isHit = false;
                        cout << "\n Select Test Mode (1 - 타격 TEST, 2 - CST 모드 TEST, -1 - Back) : ";
                        cin >> userInput;
                    }
        
                    if (userInput == -1)
                    {
                        state.test = TestSub::SelectParamByUser;
                    }
                    else if (userInput == 1)
                    {
                        params = CSTHitLoop();
                        hit_time = get<0>(params);
                        repeat = get<1>(params);
                        intensity = get<2>(params);
        
                        hitTest = 1;
                    }
                    else if (userInput == 2)
                    {
                        canManager.setSocketBlock();
                        TestStickLoop();
                        canManager.setSocketNonBlock();
                        state.test = TestSub::SelectParamByUser;
                    }
                    break;
                }
            case TestSub::SetXYZ:
                {
                    int userInput = 100;
                    int ret = system("clear");
                    if (ret == -1)
                        std::cout << "system clear error" << endl;
                    cout << "[ Current x, y, z (meter) ]\n";
                    cout << "Right : ";
                    for (int i = 0; i < 3; i++)
                    {
                        cout << R_xyz[i] << ", ";
                    }
                    cout << "\nLeft : ";
                    for (int i = 0; i < 3; i++)
                    {
                        cout << L_xyz[i] << ", ";
                    }
        
                    cout << "\nSelect Motor to Change Value (1 - Right, 2 - Left) / Start Test (3) / Exit (-1) : ";
                    cin >> userInput;
        
                    if (userInput == -1)
                    {
                        state.test = TestSub::SelectParamByUser;
                    }
                    else if (userInput == 1)
                    {
                        cout << "Enter x, y, z Values (meter) : ";
                        cin >> R_xyz[0] >> R_xyz[1] >> R_xyz[2];
                    }
                    else if (userInput == 2)
                    {
                        cout << "Enter x, y, z Values (meter) : ";
                        cin >> L_xyz[0] >> L_xyz[1] >> L_xyz[2];
                    }
                    else if (userInput == 3)
                    {
                        unfixedMotor();
                        state.test = TestSub::FillBuf;
                    }
                    break;
                }
            case TestSub::FillBuf:
                {
                    // Fill motors command Buffer
                    if (method == 1)
                    {
                        getArr(q);
                    }
                    else if (method == 2)
                    {
                        vector<float> Qf(7);
                        Qf = ikfun_final(R_xyz, L_xyz, partLength, s, z0);  // IK함수는 손목각도가 0일 때를 기준으로 풀림
                        Qf.push_back(0.0);                                  // 오른쪽 손목 각도
                        Qf.push_back(0.0);                                  // 왼쪽 손목 각도
                        for (int i = 0; i < 9; i++)
                        {
                            q[i] = Qf[i];
                            cout << Qf[i] << " ";
                        }
                        cout << "\n";
                        sleep(1);
                        getArr(q);
                    }
                    else if (method == 3)
                    {
                        getArr(q);
                    }
        
                    state.test = TestSub::Done;
                    break;
                }
            case TestSub::Done:
                {
        
                    if (method == 1)
                    {
                        state.test = TestSub::SetQValue;
                    }
                    else if (method == 2)
                    {
                        state.test = TestSub::SetXYZ;
                    }
                    else if (method == 3)
                    {
                        state.test = TestSub::TestMaxon;
                    }
                    else
                        state.test = TestSub::SelectParamByUser;
        
                    if (error)
                        state.main = Main::Error;
                    break;
                }
        }